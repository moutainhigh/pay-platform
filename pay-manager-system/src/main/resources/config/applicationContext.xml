<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task.xsd">

    <!-- 自动扫描, 黑名单过滤, 在主容器中不扫描@Controller注解 -->
    <context:component-scan base-package="com.pay.platform.common,com.pay.platform.modules">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 开启这个配置，spring才能识别@Scheduled注解   -->
    <task:scheduler id="qbScheduler" pool-size="10"/>
    <task:annotation-driven scheduler="qbScheduler" mode="proxy"/>

    <!-- 启动对@AspectJ注解的支持 -->
    <aop:aspectj-autoproxy/>

    <!-- 通知spring使用cglib而不是jdk的来生成代理方法,这样才能拦截到Controller -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!-- 配置数据源 使用的是Druid数据源 -->
    <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <!-- 连接池最大数量 -->
        <property name="maxActive" value="${jdbc.maxActive}"/>

        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="5"/>

        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="60000"/>
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="33"/>

        <!-- 用来检测有效sql -->
        <property name="validationQuery" value="select 1"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <property name="testWhileIdle" value="true"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="25200000"/>
        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="true"/>
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="1800"/>
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true"/>
        <!-- 监控数据库 -->
        <property name="filters" value="mergeStat"/>
    </bean>

    <!-- spring与mybatis整合,不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="com.pay.platform.common.plugins.mybatis.PackagesSqlSessionFactoryBean">

        <!-- 数据源 -->
        <property name="dataSource" ref="dataSource"/>

        <!-- 自动扫描mapping.xml文件,**表示递归查找-->
        <property name="mapperLocations" value="classpath:com/pay/platform/modules/**/*.xml"/>

        <!-- 自动扫描并创建别名 -->
        <property name="typeAliasesPackage" value="com.pay.platform.**.model"/>

        <!-- mybatis配置文件 -->
        <property name="configLocation" value="classpath:config/mybatis-config.xml"/>

    </bean>

    <!-- DAO接口所在包名，需采用@MapperScan注解, spring会自为接口创建实现类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.pay.platform.modules"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="annotationClass" value="org.mybatis.spring.annotation.MapperScan"/>
    </bean>

    <!-- 事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 通过aop动态拦截方法,并进行事务处理 -->
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="search*" read-only="true"/>
            <tx:method name="load*" read-only="true"/>
            <tx:method name="list*" read-only="true"/>
            <tx:method name="test*" read-only="true"/>

            <!-- 除了查询操作, 其它全部开启事务, 抛出异常时回滚-->
            <tx:method name="*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="Throwable"/>

        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="transactionPointcut" expression="bean(*ServiceImpl) || bean(*Service)"/>
        <aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice"/>
    </aop:config>


    <!--&lt;!&ndash; 指定对service层进行拦截&ndash;&gt;-->
    <!--<aop:config>-->
    <!--<aop:pointcut id="serviceOperation" expression="bean(*ServiceImpl) || bean(*Service)"/>-->
    <!--<aop:advisor advice-ref="transactionAdvice" pointcut-ref="serviceOperation"/>-->
    <!--</aop:config>-->

    <!-- 引入配置文件 -->
    <!--<bean id="propertyConfigurer"-->
    <!--class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
    <!--<property name="location" value="classpath:config/application.properties"/>-->
    <!--</bean>-->

    <!-- redis相关配置  ======================= begin -->
    <!-- redis连接池 -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${redis.maxActive}"/>
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
    </bean>

    <!-- 连接池配置，类似数据库连接池 -->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.host}"></property>
        <property name="port" value="${redis.port}"></property>
        <!-- <property name="password" value="${redis.pass}"></property> -->
        <property name="poolConfig" ref="poolConfig"></property>
    </bean>

    <!--redis操作模版,使用该对象可以操作redis  -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
        <!--如果不配置Serializer，那么存储的时候缺省使用String，如果用User类型存储，那么会提示错误User can't cast to String！！  -->
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>
        </property>
        <!-- 此处关闭redis关闭事务,与spring aop事务存在冲突  -->
        <!-- redis对于事务的支持并不是关系型数据库那样满足ACID。Redis事务只能保证ACID中的隔离性和一致性，无法保证原子性和持久性。-->
        <!--<property name="enableTransactionSupport" value="true"/>-->
    </bean>
    <!-- redis相关配置  ======================= end -->

    <!-- 开发环境配置文件 -->
    <beans profile="development">
        <context:property-placeholder location="classpath:config/application-development.properties"/>
    </beans>

    <!-- 生产环境配置文件 -->
    <beans profile="production">
        <context:property-placeholder location="classpath:config/application-production.properties"/>
    </beans>

</beans>